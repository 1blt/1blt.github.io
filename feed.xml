<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://https//1blt.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://https//1blt.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-21T05:05:47+00:00</updated><id>https://https//1blt.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Exploring and Splitting TopoJSONs</title><link href="https://https//1blt.github.io//blog/2023/topojson/" rel="alternate" type="text/html" title="Exploring and Splitting TopoJSONs"/><published>2023-08-15T09:00:00+00:00</published><updated>2023-08-15T09:00:00+00:00</updated><id>https://https//1blt.github.io//blog/2023/topojson</id><content type="html" xml:base="https://https//1blt.github.io//blog/2023/topojson/"><![CDATA[<h2 id="-appetizer">ü•ü Appetizer</h2> <p>A client was interested in visualizing national geographic datasets, but the current software package struggled to display all that information at once without crashing or slowing down.</p> <h2 id="-main-dish">üç≤ Main Dish</h2> <p>Exploring TopoJSON for Scalable Visualization: To improve scalability, I explored the feasibility of using <a href="https://github.com/topojson/topojson">TopoJSON</a>, a more compact format than GeoJSON. The goal was to reduce file size and support <strong>incremental loading</strong> of geographic data.</p> <p>I successfully converted a GeoJSON file to TopoJSON using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Creating a TopoJSON file from a GeoJSON</span>
geo2topo 01001_bgct.geojson <span class="o">&gt;</span> 01001_bgct.topojson
</code></pre></div></div> <p>This conversion achieved approximately a 75% file size reduction for a dataset in Virginia:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Size comparison
</span><span class="n">size_reduction</span> <span class="o">=</span> <span class="p">(</span><span class="mf">128.7</span> <span class="o">-</span> <span class="mf">30.9</span><span class="p">)</span> <span class="o">/</span> <span class="mf">128.7</span>
<span class="c1"># ~75.99%
</span></code></pre></div></div> <h4 id="understanding-topojson-structure">Understanding TopoJSON Structure</h4> <p>TopoJSON encodes geometry using shared arc indexes. Each shape (like a polygon) references one or more arcs by index. These arcs are stored globally, which allows different shapes to reuse the same arc definitions.</p> <p>However, this means a single TopoJSON file is not always portable across datasets‚Äîunless arc indices are coordinated globally.</p> <h4 id="incremental-loading-is-it-possible">Incremental Loading: Is It Possible?</h4> <p>Yes‚Äîwith caveats. Incremental loading works as long as:</p> <p>You define a shared global arc file up front. You retain empty arc containers for non-visible regions. You lazily fill in arc values as needed by resolution or viewport. Example of how arc references look:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># What do arc references look like?
</span><span class="p">{</span>
    <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Topology</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">objects</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">01001_bgct</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">GeometryCollection</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">geometries</span><span class="sh">'</span><span class="p">:</span> <span class="p">[{</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Polygon</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mi">2424</span><span class="p">,</span> <span class="mi">149</span><span class="p">,</span> <span class="o">-</span><span class="mi">2423</span><span class="p">,</span> <span class="mi">151</span><span class="p">,</span> <span class="mi">145</span><span class="p">,</span> <span class="mi">3280</span><span class="p">,</span> <span class="o">-</span><span class="mi">2511</span><span class="p">,</span> <span class="mi">2694</span><span class="p">,</span> <span class="mi">2487</span><span class="p">,</span> <span class="o">-</span><span class="mi">626</span><span class="p">,</span> <span class="mi">2488</span><span class="p">,</span>
                    <span class="o">-</span><span class="mi">1396</span><span class="p">,</span> <span class="mi">3196</span><span class="p">,</span> <span class="mi">3197</span><span class="p">,</span> <span class="o">-</span><span class="mi">2344</span><span class="p">,</span> <span class="o">-</span><span class="mi">1301</span><span class="p">,</span> <span class="mi">3064</span><span class="p">,</span> <span class="mi">3073</span><span class="p">,</span> <span class="mi">3506</span><span class="p">,</span> <span class="mi">3510</span><span class="p">,</span> <span class="mi">3512</span><span class="p">,</span> <span class="mi">3515</span><span class="p">,</span> <span class="p">...]]</span>
        <span class="p">}]</span>
    <span class="p">}</span>
    <span class="p">},</span>
    <span class="sh">'</span><span class="s">bbox</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mf">86.921237</span><span class="p">,</span> <span class="mf">32.307574</span><span class="p">,</span> <span class="o">-</span><span class="mf">86.411172</span><span class="p">,</span> <span class="mf">32.708213</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can use the bounding box (<code class="language-plaintext highlighter-rouge">bbox</code>) field to write a function that loads only the data within a visible viewport.</p> <h4 id="safe-removal-of-unused-arcs">Safe Removal of Unused Arcs</h4> <p>Even if some arcs are not defined (i.e., are empty), the TopoJSON file will still render:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Unused arcs still render
</span><span class="n">req_arcs</span> <span class="o">=</span> <span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test_remainder</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">j3</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">])):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req_arcs</span><span class="p">:</span>
        <span class="n">j3</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># Empty values for unused arcs, fill in later
</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/testing/01001_bgct_mod.topojson</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">j3</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/testing/01001_bgct_mod.topojson</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <blockquote> <p>‚úÖ A TopoJSON file remains valid even if some arc arrays are empty. This makes progressive loading feasible.</p> </blockquote> <h2 id="-aftertaste">üçµ Aftertaste</h2> <h4 id="arc-reuse-why-topojson-is-compact">Arc Reuse: Why TopoJSON is Compact</h4> <p>TopoJSON achieves its size reduction by reusing arcs. In real datasets, a single arc may be referenced up to 4 times across different geometries:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Counting arc use across geometries
</span><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="n">c</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
<span class="k">for</span> <span class="n">geo</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">j4</span><span class="p">[</span><span class="sh">'</span><span class="s">objects</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">va_combined</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">geometries</span><span class="sh">'</span><span class="p">]):</span>
    <span class="n">li</span> <span class="o">=</span> <span class="n">geo</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">flatten</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">l</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">flatten</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="p">[])</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="n">l</span><span class="p">]</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="nc">Counter</span><span class="p">(</span><span class="nf">flatten</span><span class="p">(</span><span class="n">li</span><span class="p">))</span>

<span class="sh">'''</span><span class="s">
Counter({
    0: 4, 1: 4, 2: 4, ..., 924: 3, 925: 3, ...
})
</span><span class="sh">'''</span>
</code></pre></div></div> <p>This means that even complex maps can remain small, provided that arcs are intelligently indexed and shared.</p> <h2 id="Ô∏è-final-bite">üçΩÔ∏è Final Bite</h2> <p>TopoJSON provides a powerful and efficient way to compress geographic data. With some care in managing arc indices and structure, it also supports incremental rendering and lazy loading, which is crucial for large-scale interactive maps.</p>]]></content><author><name></name></author><category term="research-log"/><category term="code"/><category term="data"/><category term="geo"/><summary type="html"><![CDATA[Investigating how to compress and lazily load geographic datasets using TopoJSON for scalable visualization.]]></summary></entry><entry><title type="html">Extracting Broadband Data in an IP-Throttled Web</title><link href="https://https//1blt.github.io//blog/2023/extracting-broadband-data/" rel="alternate" type="text/html" title="Extracting Broadband Data in an IP-Throttled Web"/><published>2023-07-25T09:00:00+00:00</published><updated>2023-07-25T09:00:00+00:00</updated><id>https://https//1blt.github.io//blog/2023/extracting-broadband-data</id><content type="html" xml:base="https://https//1blt.github.io//blog/2023/extracting-broadband-data/"><![CDATA[<h2 id="-appetizer">ü•ü Appetizer</h2> <p>We needed to extract broadband coverage data for counties surrounding the capitals of <strong>Alabama and Georgia</strong>, but the source website aggressively blocked IP addresses after detecting high traffic. This made large-scale data scraping nearly impossible through conventional means.</p> <h2 id="-main-dish">üç≤ Main Dish</h2> <p>To sidestep the IP throttling issue, we developed a novel scraping workflow that avoids hitting the same endpoints repeatedly:</p> <ul> <li>Rather than pulling bulk datasets directly, we <strong>reverse-geocoded incrementally spaced latitude-longitude coordinates</strong> and delayed sampling to retrieve addresses block-by-block.</li> <li>This allowed us to systematically gather coverage data at the <strong>block group level</strong> without tripping anti-bot protections.</li> </ul> <pre><code class="language-mermaid">flowchart LR
    A[Select GEOIDs to parse] --&gt; B{Data @ geography &lt;br/&gt; level exist?}
    B -- Yes, move to next --&gt; A
    B -- No --&gt; C[Generate n &lt;/br&gt; points inside shape]
    C -- Lat, Lon --&gt; D[Reverse &lt;/br&gt; geocode]
    D -- Address --&gt; E[Query &lt;/br&gt; Broadband Website]
    E --&gt; G{At least one &lt;/br&gt; query success?}
    G -- No, n*=2 --&gt; C
    G -- Yes --&gt; H[Save to file]
    H --&gt; I{More data to &lt;/br&gt; extract?}
    I -- No --&gt; J[Done]
    I -- Yes --&gt; A
</code></pre> <ul> <li>We tested multiple VPN approaches, and found that <strong>IP rotation tools like Surfshark‚Äôs</strong> were not reliable overnight‚Äîoften stalling or failing to refresh, making them unsuitable for unattended scraping.</li> <li>A tailored approach for simulating human browsing behavior‚Äîcombined with measured pacing‚Äîenabled us to collect data from the website in a respectful and non-intrusive manner.</li> </ul> <h2 id="-aftertaste">üçµ Aftertaste</h2> <p>The final workflow allowed us to successfully extract <strong>100% block-group level coverage</strong> for the targeted regions:</p> <div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/100_mbps-480.webp 480w,/assets/img/100_mbps-800.webp 800w,/assets/img/100_mbps-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/100_mbps.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Data extracted from broadband website by block-group" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="Ô∏è-final-bite">üçΩÔ∏è Final Bite</h2> <p>When brute force breaks down, precision wins. In scraping, as in design, knowing <em>where</em> to poke often matters more than how hard you push. Sometimes, the cleverest path is the one that mimics how humans would look things up‚Äîjust with a lot more patience.</p>]]></content><author><name></name></author><category term="research-log"/><category term="data"/><category term="geo"/><summary type="html"><![CDATA[A creative geospatial scraping strategy to extract block-group broadband data for Alabama and Georgia capitals.]]></summary></entry></feed>