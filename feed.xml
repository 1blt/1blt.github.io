<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://https//1blt.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://https//1blt.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-21T01:37:09+00:00</updated><id>https://https//1blt.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Exploring and Splitting TopoJSONs</title><link href="https://https//1blt.github.io//blog/2023/topojson/" rel="alternate" type="text/html" title="Exploring and Splitting TopoJSONs"/><published>2023-08-15T09:00:00+00:00</published><updated>2023-08-15T09:00:00+00:00</updated><id>https://https//1blt.github.io//blog/2023/topojson</id><content type="html" xml:base="https://https//1blt.github.io//blog/2023/topojson/"><![CDATA[<h2 id="appetizer">Appetizer</h2> <p>Client was interested in visualizing national datasets, but the current software package has trouble display all that information at once.</p> <h2 id="appetite">Appetite</h2> <p>Explore feasability for using <a href="https://github.com/topojson/topojson">TopoJSON</a> to reduce size of the GeoJSON and incrementally load the geographic datasets.</p> <h2 id="aftertaste">Aftertaste</h2> <p>Successfully converted a GeoJSON to a TopoJSON:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Creating a topojson file</span>
geo2topo 01001_bgct.geojson <span class="o">&gt;</span> 01001_bgct.topojson
</code></pre></div></div> <p>Achieved ~75% reduction in file size between GeoJSON and TopoJSON for Virginia:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculating size differences between geojson and topojson
</span><span class="n">size_reduction</span> <span class="o">=</span> <span class="p">(</span><span class="mf">128.7</span> <span class="o">-</span> <span class="mf">30.9</span><span class="p">)</span> <span class="o">/</span> <span class="mf">128.7</span>
<span class="c1"># 0.7599067599067598
</span></code></pre></div></div> <p>TopoJSONs generate arcs that each object references by index. One TopoJSON is not necessarily translatable across different geometries unless its reference index is global across files.</p> <p>This means <strong>incremental loading is possible</strong>, as long as:</p> <ul> <li>The global file of arcs is built first.</li> <li>Empty containers and indices not referenced for the current resolution are left in place and filled lazily as needed.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># What do arc references look like?
</span><span class="p">{</span>
    <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Topology</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">objects</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">01001_bgct</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">GeometryCollection</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">geometries</span><span class="sh">'</span><span class="p">:</span> <span class="p">[{</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Polygon</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mi">2424</span><span class="p">,</span> <span class="mi">149</span><span class="p">,</span> <span class="o">-</span><span class="mi">2423</span><span class="p">,</span> <span class="mi">151</span><span class="p">,</span> <span class="mi">145</span><span class="p">,</span> <span class="mi">3280</span><span class="p">,</span> <span class="o">-</span><span class="mi">2511</span><span class="p">,</span> <span class="mi">2694</span><span class="p">,</span> <span class="mi">2487</span><span class="p">,</span> <span class="o">-</span><span class="mi">626</span><span class="p">,</span> <span class="mi">2488</span><span class="p">,</span>
                    <span class="o">-</span><span class="mi">1396</span><span class="p">,</span> <span class="mi">3196</span><span class="p">,</span> <span class="mi">3197</span><span class="p">,</span> <span class="o">-</span><span class="mi">2344</span><span class="p">,</span> <span class="o">-</span><span class="mi">1301</span><span class="p">,</span> <span class="mi">3064</span><span class="p">,</span> <span class="mi">3073</span><span class="p">,</span> <span class="mi">3506</span><span class="p">,</span> <span class="mi">3510</span><span class="p">,</span> <span class="mi">3512</span><span class="p">,</span> <span class="mi">3515</span><span class="p">,</span> <span class="p">...]]</span>
        <span class="p">}]</span>
    <span class="p">}</span>
    <span class="p">},</span>
    <span class="sh">'</span><span class="s">bbox</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mf">86.921237</span><span class="p">,</span> <span class="mf">32.307574</span><span class="p">,</span> <span class="o">-</span><span class="mf">86.411172</span><span class="p">,</span> <span class="mf">32.708213</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can take advantage of the built-in bounding box to write an oracle function to load data based on the visible viewport.</p> <p>If we remove unused arcs in the TopoJSON, the file can still render:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Unused arcs still render
</span><span class="n">req_arcs</span> <span class="o">=</span> <span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test_remainder</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">j3</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">])):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req_arcs</span><span class="p">:</span>
        <span class="n">j3</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># Empty values for unused arcs, fill in later
</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/testing/01001_bgct_mod.topojson</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">j3</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/testing/01001_bgct_mod.topojson</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <blockquote> <p>A topojson is still valid if there are empty containers inside the arc lists</p> </blockquote> <p>The TopoJSON can only be \(\leq\) GeoJSON in size because arcs can be reused across geometries.</p> <p>On testing real files, arcs can be used up to 4 times between geometries:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Counting arc use across geometries
</span><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="n">c</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
<span class="k">for</span> <span class="n">geo</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">j4</span><span class="p">[</span><span class="sh">'</span><span class="s">objects</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">va_combined</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">geometries</span><span class="sh">'</span><span class="p">]):</span>
    <span class="n">li</span> <span class="o">=</span> <span class="n">geo</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">flatten</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">l</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">flatten</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="p">[])</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="n">l</span><span class="p">]</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="nc">Counter</span><span class="p">(</span><span class="nf">flatten</span><span class="p">(</span><span class="n">li</span><span class="p">))</span>

<span class="sh">'''</span><span class="s">
Counter({
    0: 4, 1: 4, 2: 4, ..., 924: 3, 925: 3, ...
})
</span><span class="sh">'''</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="research-log"/><category term="code"/><category term="data"/><summary type="html"><![CDATA[Investigating how to compress and lazily load geographic datasets using TopoJSON for scalable visualization.]]></summary></entry></feed>