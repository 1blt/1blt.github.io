<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://https//1blt.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://https//1blt.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-01T17:57:55+00:00</updated><id>https://https//1blt.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Exploring and Splitting TopoJSONs</title><link href="https://https//1blt.github.io//blog/2023/topojson/" rel="alternate" type="text/html" title="Exploring and Splitting TopoJSONs"/><published>2023-08-15T09:00:00+00:00</published><updated>2023-08-15T09:00:00+00:00</updated><id>https://https//1blt.github.io//blog/2023/topojson</id><content type="html" xml:base="https://https//1blt.github.io//blog/2023/topojson/"><![CDATA[<h2 id="-appetizer">ü•ü Appetizer</h2> <p>A client was interested in visualizing national geographic datasets, but the current software package struggled to display all that information at once without crashing or slowing down.</p> <h2 id="-main-dish">üç≤ Main Dish</h2> <p>Exploring TopoJSON for Scalable Visualization: To improve scalability, I explored the feasibility of using <a href="https://github.com/topojson/topojson">TopoJSON</a>, a more compact format than GeoJSON. The goal was to reduce file size and support <strong>incremental loading</strong> of geographic data.</p> <p>I successfully converted a GeoJSON file to TopoJSON using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Creating a TopoJSON file from a GeoJSON</span>
geo2topo 01001_bgct.geojson <span class="o">&gt;</span> 01001_bgct.topojson
</code></pre></div></div> <p>This conversion achieved approximately a 75% file size reduction for a dataset in Virginia:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Size comparison
</span><span class="n">size_reduction</span> <span class="o">=</span> <span class="p">(</span><span class="mf">128.7</span> <span class="o">-</span> <span class="mf">30.9</span><span class="p">)</span> <span class="o">/</span> <span class="mf">128.7</span>
<span class="c1"># ~75.99%
</span></code></pre></div></div> <h4 id="understanding-topojson-structure">Understanding TopoJSON Structure</h4> <p>TopoJSON encodes geometry using shared arc indexes. Each shape (like a polygon) references one or more arcs by index. These arcs are stored globally, which allows different shapes to reuse the same arc definitions.</p> <p>However, this means a single TopoJSON file is not always portable across datasets‚Äîunless arc indices are coordinated globally.</p> <h4 id="incremental-loading-is-it-possible">Incremental Loading: Is It Possible?</h4> <p>Yes‚Äîwith caveats. Incremental loading works as long as:</p> <p>You define a shared global arc file up front. You retain empty arc containers for non-visible regions. You lazily fill in arc values as needed by resolution or viewport. Example of how arc references look:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># What do arc references look like?
</span><span class="p">{</span>
    <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Topology</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">objects</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">01001_bgct</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">GeometryCollection</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">geometries</span><span class="sh">'</span><span class="p">:</span> <span class="p">[{</span>
        <span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Polygon</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mi">2424</span><span class="p">,</span> <span class="mi">149</span><span class="p">,</span> <span class="o">-</span><span class="mi">2423</span><span class="p">,</span> <span class="mi">151</span><span class="p">,</span> <span class="mi">145</span><span class="p">,</span> <span class="mi">3280</span><span class="p">,</span> <span class="o">-</span><span class="mi">2511</span><span class="p">,</span> <span class="mi">2694</span><span class="p">,</span> <span class="mi">2487</span><span class="p">,</span> <span class="o">-</span><span class="mi">626</span><span class="p">,</span> <span class="mi">2488</span><span class="p">,</span>
                    <span class="o">-</span><span class="mi">1396</span><span class="p">,</span> <span class="mi">3196</span><span class="p">,</span> <span class="mi">3197</span><span class="p">,</span> <span class="o">-</span><span class="mi">2344</span><span class="p">,</span> <span class="o">-</span><span class="mi">1301</span><span class="p">,</span> <span class="mi">3064</span><span class="p">,</span> <span class="mi">3073</span><span class="p">,</span> <span class="mi">3506</span><span class="p">,</span> <span class="mi">3510</span><span class="p">,</span> <span class="mi">3512</span><span class="p">,</span> <span class="mi">3515</span><span class="p">,</span> <span class="p">...]]</span>
        <span class="p">}]</span>
    <span class="p">}</span>
    <span class="p">},</span>
    <span class="sh">'</span><span class="s">bbox</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mf">86.921237</span><span class="p">,</span> <span class="mf">32.307574</span><span class="p">,</span> <span class="o">-</span><span class="mf">86.411172</span><span class="p">,</span> <span class="mf">32.708213</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can use the bounding box (<code class="language-plaintext highlighter-rouge">bbox</code>) field to write a function that loads only the data within a visible viewport.</p> <h4 id="safe-removal-of-unused-arcs">Safe Removal of Unused Arcs</h4> <p>Even if some arcs are not defined (i.e., are empty), the TopoJSON file will still render:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Unused arcs still render
</span><span class="n">req_arcs</span> <span class="o">=</span> <span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test_remainder</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">j3</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">])):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req_arcs</span><span class="p">:</span>
        <span class="n">j3</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># Empty values for unused arcs, fill in later
</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/testing/01001_bgct_mod.topojson</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">j3</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/testing/01001_bgct_mod.topojson</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <blockquote> <p>‚úÖ A TopoJSON file remains valid even if some arc arrays are empty. This makes progressive loading feasible.</p> </blockquote> <h2 id="-aftertaste">üçµ Aftertaste</h2> <h4 id="arc-reuse-why-topojson-is-compact">Arc Reuse: Why TopoJSON is Compact</h4> <p>TopoJSON achieves its size reduction by reusing arcs. In real datasets, a single arc may be referenced up to 4 times across different geometries:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Counting arc use across geometries
</span><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="n">c</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
<span class="k">for</span> <span class="n">geo</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">j4</span><span class="p">[</span><span class="sh">'</span><span class="s">objects</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">va_combined</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">geometries</span><span class="sh">'</span><span class="p">]):</span>
    <span class="n">li</span> <span class="o">=</span> <span class="n">geo</span><span class="p">[</span><span class="sh">'</span><span class="s">arcs</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">flatten</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">l</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">flatten</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="p">[])</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="n">l</span><span class="p">]</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="nc">Counter</span><span class="p">(</span><span class="nf">flatten</span><span class="p">(</span><span class="n">li</span><span class="p">))</span>

<span class="sh">'''</span><span class="s">
Counter({
    0: 4, 1: 4, 2: 4, ..., 924: 3, 925: 3, ...
})
</span><span class="sh">'''</span>
</code></pre></div></div> <p>This means that even complex maps can remain small, provided that arcs are intelligently indexed and shared.</p> <h2 id="Ô∏è-final-bite">üçΩÔ∏è Final Bite</h2> <p>TopoJSON provides a powerful and efficient way to compress geographic data. With some care in managing arc indices and structure, it also supports incremental rendering and lazy loading, which is crucial for large-scale interactive maps.</p>]]></content><author><name></name></author><category term="research-log"/><category term="code"/><category term="data"/><category term="geo"/><summary type="html"><![CDATA[Investigating how to compress and lazily load geographic datasets using TopoJSON for scalable visualization.]]></summary></entry><entry><title type="html">Extracting Broadband Data in an IP-Throttled Web</title><link href="https://https//1blt.github.io//blog/2023/extracting-broadband-data/" rel="alternate" type="text/html" title="Extracting Broadband Data in an IP-Throttled Web"/><published>2023-07-25T09:00:00+00:00</published><updated>2023-07-25T09:00:00+00:00</updated><id>https://https//1blt.github.io//blog/2023/extracting-broadband-data</id><content type="html" xml:base="https://https//1blt.github.io//blog/2023/extracting-broadband-data/"><![CDATA[<h2 id="-appetizer">ü•ü Appetizer</h2> <p>We needed to extract broadband coverage data for counties surrounding the capitals of <strong>Alabama and Georgia</strong>, but the source website aggressively blocked IP addresses after detecting high traffic. This made large-scale data scraping nearly impossible through conventional means.</p> <h2 id="-main-dish">üç≤ Main Dish</h2> <p>To sidestep the IP throttling issue, we developed a novel scraping workflow that avoids hitting the same endpoints repeatedly:</p> <ul> <li>Rather than pulling bulk datasets directly, we <strong>reverse-geocoded incrementally spaced latitude-longitude coordinates</strong> and delayed sampling to retrieve addresses block-by-block.</li> <li>This allowed us to systematically gather coverage data at the <strong>block group level</strong> without tripping anti-bot protections.</li> </ul> <div style="display: flex; justify-content: center;"> <div style="width: fit-content; max-width: 100%;"> <pre class="mermaid">
flowchart TD
    A[Select GEOIDs to parse] --&gt; B{Data @ geography <br /> level exist?}
    B -- Yes, move to next --&gt; A
    B -- No --&gt; C[Generate n &lt;/br&gt; points inside shape]
    C -- Lat, Lon --&gt; D[Reverse &lt;/br&gt; geocode]
    D -- Address --&gt; E[Query &lt;/br&gt; Broadband Website]
    E --&gt; G{At least one &lt;/br&gt; query success?}
    G -- No, n*=2 --&gt; C
    G -- Yes --&gt; H[Save to file]
    H --&gt; I{More data to &lt;/br&gt; extract?}
    I -- No --&gt; J[Done]
    I -- Yes --&gt; A
    </pre> </div> </div> <ul> <li>We tested multiple VPN approaches, and found that <strong>IP rotation tools like Surfshark‚Äôs</strong> were not reliable overnight‚Äîoften stalling or failing to refresh, making them unsuitable for unattended scraping.</li> <li>A tailored approach for simulating human browsing behavior‚Äîcombined with measured pacing‚Äîenabled us to collect data from the website in a respectful and non-intrusive manner.</li> </ul> <h2 id="-aftertaste">üçµ Aftertaste</h2> <p>The final workflow allowed us to successfully extract <strong>100% block-group level coverage</strong> for the targeted regions:</p> <div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/100_mbps-480.webp 480w,/assets/img/100_mbps-800.webp 800w,/assets/img/100_mbps-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/100_mbps.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Data extracted from broadband website by block-group" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h2 id="Ô∏è-final-bite">üçΩÔ∏è Final Bite</h2> <p>When brute force breaks down, precision wins. In scraping, as in design, knowing <em>where</em> to poke often matters more than how hard you push. Sometimes, the cleverest path is the one that mimics how humans would look things up‚Äîjust with a lot more patience.</p>]]></content><author><name></name></author><category term="research-log"/><category term="data"/><category term="geo"/><summary type="html"><![CDATA[A creative geospatial scraping strategy to extract block-group broadband data for Alabama and Georgia capitals.]]></summary></entry><entry><title type="html">Merging OSM Files</title><link href="https://https//1blt.github.io//blog/2022/merging-osm/" rel="alternate" type="text/html" title="Merging OSM Files"/><published>2022-06-23T09:00:00+00:00</published><updated>2022-06-23T09:00:00+00:00</updated><id>https://https//1blt.github.io//blog/2022/merging-osm</id><content type="html" xml:base="https://https//1blt.github.io//blog/2022/merging-osm/"><![CDATA[<p>This post investigates discrepancies in routing distances using multiple geospatial data sources, including Google Maps, and a custom merged OpenStreetMap file. It highlights anomalies in travel time calculations caused by inaccurate snapping and explores methods to resolve them. The detailed results are organized below in expandable sections for clarity and comparison.</p> <style>.expand-collapse-btn{padding:8px 16px;margin:.25em .5em 1em 0;font-size:.95rem;font-weight:500;color:#fff;background-color:#007acc;border:0;border-radius:6px;cursor:pointer;box-shadow:0 2px 5px rgba(0,0,0,0.1);transition:background-color .2s ease}.expand-collapse-btn:hover{background-color:#005fa3}</style> <p><button id="expand-all" class="expand-collapse-btn">Expand All</button> <button id="collapse-all" class="expand-collapse-btn">Collapse All</button></p> <details> <summary><strong>June 23, Thursday:</strong> Satisfactory result from testing</summary> <div> <ul> <li>I came back and found out that the process ran successfully.</li> <li>I went ahead and completed the ‚Äò‚Äòset-up‚Äù and went forward with the testing.</li> <li>The results show that the merged file has a <code class="language-plaintext highlighter-rouge">82%</code> match with the OSRM base server</li> </ul> </div> </details> <hr/> <details> <summary><strong>June 22, Wednesday:</strong> Further investigating the OSRM queries</summary> <div> <ul> <li>I took a look at the OSRM query, and found some <a href="https://stackoverflow.com/questions/48221046/osrm-giving-wrong-response-for-distance-between-2-points">stackoverflow responses</a>. Specifically, <ul> <li>Do a manual sanity check about the route <a href="http://map.project-osrm.org/">here</a></li> <li>Then cross reference whether the reference check would like like <a href="https://router.project-osrm.org/route/v1/driving/-78.8688833,38.4493315;-82.1885009,36.5959685">this</a>. Essentially, the coordinates should be supplied in lon lat format instead of lat lon</li> <li>Instead of root mean square error, I felt that using mean absolute difference made some more sense when reporting the individual elements as well as the collective error</li> </ul> </li> <li> <p>I then got the credentials for the digital ocean server on which I could run the OSRM things. The server runs pretty fast. I used <code class="language-plaintext highlighter-rouge">scp</code> to copy the pbf file onto the server to initialize the extraction. Since one of the operations took a long time, I looked to see if I can run something in the background and tackle it tomorrow when I came back. I found:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">nohup </span>long-running-process &amp; <span class="nb">exit</span>
<span class="c"># To look up after you come back</span>
<span class="nb">tail</span> <span class="nt">-f</span> nohup.out
</code></pre></div> </div> </li> </ul> </div> </details> <hr/> <details> <summary><strong>June 16, Thursday:</strong> Testing against the custom OSRM server</summary> <div> <ul> <li>The last part of the works I think should be finding the ability to query the docker server and cross compare the results. Looking at <a href="https://docs.docker.com/desktop/mac/networking/">Networking for Docker on MacOS</a>.</li> <li>Success. When running docker‚Äôs publish flag, the first argument is the host, and the next argument is the port on the container. ``To clarify the syntax, the following two commands both expose port 80 on the container to port 8000 on the host:‚Äù <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker run <span class="nt">--publish</span> 8000:80 <span class="nt">--name</span> webserver nginx
  docker run <span class="nt">-p</span> 8000:80 <span class="nt">--name</span> webserver nginx
</code></pre></div> </div> </li> <li>I‚Äôve finished testing to a point. When I used the actual responses, none of the responses matched. If I use the route 0 distance, we actually get about 60 to 80 \% matches, but only on distances that were 0.</li> </ul> <p>In any case, I compiled an excel sheet with the query, response, city coordinates.</p> </div> </details> <hr/> <details> <summary><strong>June 15, Wednesday:</strong> Ground truth for merged OSM File</summary> <div> <ul> <li> <p>Looked into an error ``/data/.osrm.ebg‚Äù not found!‚Äù and realized that you need to give a docker instance more memory in order to run the compilation. Therefore, I added 50g to the memory of the docker run in order to run the extraction.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--memory</span><span class="o">=</span>50g <span class="nt">-t</span> <span class="nt">-v</span> <span class="s2">"</span><span class="k">${</span><span class="nv">PWD</span><span class="k">}</span><span class="s2">:/data"</span> osrm/osrm-backend osrm-extract <span class="nt">-p</span>  /opt/car.lua /data/merged.osm.pbf
</code></pre></div> </div> </li> <li> <p>This still did not work, so looking for an alternative solution. I will first try just rendering it for a single state, and see what the final completed ending messages are:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>info] Writing edge-based-graph edges       ... 
<span class="o">[</span>info] ok, after 31.9418s
<span class="o">[</span>info] Processed 7687138 edges
<span class="o">[</span>info] Expansion: 26098 nodes/sec and 8605 edges/sec
<span class="o">[</span>info] To prepare the data <span class="k">for </span>routing, run: ./osrm-contract <span class="s2">"/data/virginia-latest.osrm"</span>
<span class="o">[</span>info] RAM: peak bytes used: 3638427648
</code></pre></div> </div> </li> <li>Response from the state of Virginia <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># curl "http://127.0.0.1:5000/route/v1/driving/38.9072,77.0369;36.7783,119.4179?annotations=distance"</span>
<span class="o">{</span><span class="s2">"message"</span>:<span class="s2">"Invalid coordinate value."</span>,<span class="s2">"code"</span>:<span class="s2">"InvalidValue"</span><span class="o">}</span><span class="c"># curl "http://127.0.0.1:5000/route/v1/driving/38.894500,77.070400;38.897700,77.036500?annotations=distance"</span>
<span class="o">{</span><span class="s2">"code"</span>:<span class="s2">"Ok"</span>,<span class="s2">"routes"</span>:[<span class="o">{</span><span class="s2">"geometry"</span>:<span class="s2">"w|</span><span class="sb">`</span>hFp<span class="o">{</span>viM??<span class="s2">","</span>legs<span class="s2">":[{"</span>annotation<span class="s2">":{"</span>distance<span class="s2">":[0]},"</span>steps<span class="s2">":[],"</span>distance<span class="s2">":0,"</span>duration<span class="s2">":0,"</span>summary<span class="s2">":"","</span>weight<span class="s2">":0}],"</span>distance<span class="s2">":0,"</span>duration<span class="s2">":0,"</span>weight_name<span class="s2">":"</span>routability<span class="s2">","</span>weight<span class="s2">":0}],"</span>waypoints<span class="s2">":[{"</span>hint<span class="s2">":"</span>zXQfgM90H4AAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQAYAwAAJCKF-5ymRgKke1ECQACYBAAALw3q5C0b<span class="s2">","</span>distance<span class="s2">":8074707.069774,"</span>name<span class="s2">":"","</span>location<span class="s2">":[-75.161052,38.184604]},{"</span>hint<span class="s2">":"</span>zXQfgM90H4AAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQAYAwAAJCKF-5ymRgIkiFEC1HuXBAAALw3q5C0b<span class="s2">","</span>distance<span class="s2">":8072844.13171,"</span>name<span class="s2">":"","</span>location<span class="s2">":[-75.161052,38.184604]}]}# curl "</span>http://127.0.0.1:5000/route/v1/driving/38.8945,77.0704<span class="p">;</span>40.4406,79.9959?annotations<span class="o">=</span>distance<span class="s2">"
{"</span>code<span class="s2">":"</span>Ok<span class="s2">","</span>routes<span class="s2">":[{"</span>geometry<span class="s2">":"</span>w|<span class="sb">`</span><span class="s2">hFp{viM??"</span>,<span class="s2">"legs"</span>:[<span class="o">{</span><span class="s2">"annotation"</span>:<span class="o">{</span><span class="s2">"distance"</span>:[0]<span class="o">}</span>,<span class="s2">"steps"</span>:[],<span class="s2">"distance"</span>:0,<span class="s2">"duration"</span>:0,<span class="s2">"summary"</span>:<span class="s2">""</span>,<span class="s2">"weight"</span>:0<span class="o">}]</span>,<span class="s2">"distance"</span>:0,<span class="s2">"duration"</span>:0,<span class="s2">"weight_name"</span>:<span class="s2">"routability"</span>,<span class="s2">"weight"</span>:0<span class="o">}]</span>,<span class="s2">"waypoints"</span>:[<span class="o">{</span><span class="s2">"hint"</span>:<span class="s2">"zXQfgM90H4AAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQAYAwAAJCKF-5ymRgKke1ECQACYBAAALw3q5C0b"</span>,<span class="s2">"distance"</span>:8074707.069774,<span class="s2">"name"</span>:<span class="s2">""</span>,<span class="s2">"location"</span>:[-75.161052,38.184604]<span class="o">}</span>,<span class="o">{</span><span class="s2">"hint"</span>:<span class="s2">"zXQfgM90H4AAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQAYAwAAJCKF-5ymRgIYE2kC_KPEBAAALw3q5C0b"</span>,<span class="s2">"distance"</span>:8102575.604085,<span class="s2">"name"</span>:<span class="s2">""</span>,<span class="s2">"location"</span>:[-75.161052,38.184604]<span class="o">}]}</span>
</code></pre></div> </div> </li> <li>Response from Virignia + West Virginia <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># curl "http://127.0.0.1:5000/route/v1/driving/38.9072,77.0369;36.7783,119.4179?annotations=distance"</span>
<span class="o">{</span><span class="s2">"message"</span>:<span class="s2">"Invalid coordinate value."</span>,<span class="s2">"code"</span>:<span class="s2">"InvalidValue"</span><span class="o">}</span><span class="c"># curl "http://127.0.0.1:5000/route/v1/driving/38.894500,77.070400;38.897700,77.036500?annotations=distance"</span>
<span class="o">{</span><span class="s2">"code"</span>:<span class="s2">"Ok"</span>,<span class="s2">"routes"</span>:[<span class="o">{</span><span class="s2">"geometry"</span>:<span class="s2">"w|</span><span class="sb">`</span>hFp<span class="o">{</span>viM??<span class="s2">","</span>legs<span class="s2">":[{"</span>annotation<span class="s2">":{"</span>distance<span class="s2">":[0]},"</span>steps<span class="s2">":[],"</span>distance<span class="s2">":0,"</span>duration<span class="s2">":0,"</span>summary<span class="s2">":"","</span>weight<span class="s2">":0}],"</span>distance<span class="s2">":0,"</span>duration<span class="s2">":0,"</span>weight_name<span class="s2">":"</span>routability<span class="s2">","</span>weight<span class="s2">":0}],"</span>waypoints<span class="s2">":[{"</span>hint<span class="s2">":"</span>_LwGgP68BoAAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQB5AwAAJCKF-5ymRgKke1ECQACYBAAALw0nEIeN<span class="s2">","</span>distance<span class="s2">":8074707.069774,"</span>name<span class="s2">":"","</span>location<span class="s2">":[-75.161052,38.184604]},{"</span>hint<span class="s2">":"</span>_LwGgP68BoAAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQB5AwAAJCKF-5ymRgIkiFEC1HuXBAAALw0nEIeN<span class="s2">","</span>distance<span class="s2">":8072844.13171,"</span>name<span class="s2">":"","</span>location<span class="s2">":[-75.161052,38.184604]}]}# curl "</span>http://127.0.0.1:5000/route/v1/driving/38.8945,77.0704<span class="p">;</span>40.4406,79.9959?annotations<span class="o">=</span>distance<span class="s2">"
{"</span>code<span class="s2">":"</span>Ok<span class="s2">","</span>routes<span class="s2">":[{"</span>geometry<span class="s2">":"</span>w|<span class="sb">`</span><span class="s2">hFp{viM??"</span>,<span class="s2">"legs"</span>:[<span class="o">{</span><span class="s2">"annotation"</span>:<span class="o">{</span><span class="s2">"distance"</span>:[0]<span class="o">}</span>,<span class="s2">"steps"</span>:[],<span class="s2">"distance"</span>:0,<span class="s2">"duration"</span>:0,<span class="s2">"summary"</span>:<span class="s2">""</span>,<span class="s2">"weight"</span>:0<span class="o">}]</span>,<span class="s2">"distance"</span>:0,<span class="s2">"duration"</span>:0,<span class="s2">"weight_name"</span>:<span class="s2">"routability"</span>,<span class="s2">"weight"</span>:0<span class="o">}]</span>,<span class="s2">"waypoints"</span>:[<span class="o">{</span><span class="s2">"hint"</span>:<span class="s2">"_LwGgP68BoAAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQB5AwAAJCKF-5ymRgKke1ECQACYBAAALw0nEIeN"</span>,<span class="s2">"distance"</span>:8074707.069774,<span class="s2">"name"</span>:<span class="s2">""</span>,<span class="s2">"location"</span>:[-75.161052,38.184604]<span class="o">}</span>,<span class="o">{</span><span class="s2">"hint"</span>:<span class="s2">"_LwGgP68BoAAAAAAHAEAAAAAAABPDAEAAAAAANNqnUIAAAAACdiURgAAAAAcAQAAAAAAAE8MAQB5AwAAJCKF-5ymRgIYE2kC_KPEBAAALw0nEIeN"</span>,<span class="s2">"distance"</span>:8102575.604085,<span class="s2">"name"</span>:<span class="s2">""</span>,<span class="s2">"location"</span>:[-75.161052,38.184604]<span class="o">}]}</span><span class="c"># </span>
</code></pre></div> </div> </li> <li> <p>It looks like the proper location in the response to extract the distances are based off of the legs instead of the way points. But also, the extracted file from Osmium seems to be working correctly. At least for Virginia + West Virginia.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#curl "http://127.0.0.1:5000/route/v1/driving/37.630212545662474,-77.38546027847718;38.694396643163486,-79.9854414837675?annotations=distance"</span>

ce<span class="s2">":[0]},"</span>steps<span class="s2">":[],"</span>distance<span class="s2">":0,"</span>duration<span class="s2">":0,"</span>summary<span class="s2">":"","</span>weight<span class="s2">":0}],"</span>distance<span class="s2">":0,"</span>duration<span class="s2">":0,"</span>weight_name<span class="s2">":"</span>routability<span class="s2">","</span>weight<span class="s2">":0}],"</span>waypoints<span class="s2">":[{"</span>hint<span class="s2">":"</span>o0EFgKRBBYAAAAAAFAAAAAAAAACCCAAAAAAAAGGfXEEAAAAATLm8RAAAAAAUAAAAAAAAAIIIAAAkBQCABXB5-0iCLQIFMT4CDDFj-wAAPwAnEIeN<span class="s2">","</span>distance<span class="s2">":17306391.47749,"</span>name<span class="s2">":"</span>Knotts Island Road<span class="s2">","</span>location<span class="s2">":[-75.927547,36.536904]},{"</span>hint<span class="s2">":"</span>o0EFgKRBBYAAAAAAFAAAAAAAAACCCAAAAAAAAGGfXEEAAAAATLm8RAAAAAAUAAAAAAAAAIIIAAAkBQCABXB5-0iCLQL9bU4C34Q7-wAAPwAnEIeN<span class="s2">","</span>distance<span class="s2">":17523813.71623,"</span>name<span class="s2">":"</span>Knotts Island Road<span class="s2">","</span>location<span class="s2">":[-75.927547,36.536904]}]}
</span></code></pre></div> </div> </li> <li>The answers are still zero? Which doesn‚Äôt make sense. The kill all solution is probably to generate a list of random coordinates and cross-check that the return from the docker instance is same as the osm server.</li> <li>I put together a <a href="https://github.com/1blt-archive/dspg22_osm-tester">tester repository</a> for posterity.</li> </ul> </div> </details> <hr/> <details> <summary><strong>June 14, Tuesday:</strong> Constructing test cases for OSM files</summary> <div> <ul> <li>Looking at how to <a href="https://docs.osmcode.org/osmium/latest/osmium-merge.html">merge</a> different states. Found the following command in Osmium <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  osmium merge file1.osm file2.osm <span class="nt">-o</span> merged.osm
</code></pre></div> </div> </li> <li> <p>I used the above command to combine the following files: District of Columbia, Pennsylvania, Virginia, and West Virginia and it seemed to work well. Tested this system on Docker, and storing a <a href="https://gist.github.com/1blt-archive/859cefaea7b61046d084ead1b3d104a1">gist</a> for future users. Note: it takes about half a day to a whole day just to compile the combined files for the osrm-partition and osrm-customize.</p> </li> <li>Got in, but running it now gives me errors: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  qemu: uncaught target signal 11 <span class="o">(</span>Segmentation fault<span class="o">)</span> - core dumped
</code></pre></div> </div> </li> <li> <p>Based on the <a href="http://project-osrm.org/docs/v5.5.1/api/#routeleg-object">OSRM API Documentation</a>, the returned distances is in meters.</p> <table> <thead> <tr> <th>#</th> <th>Source</th> <th>From (Lat, Lon)</th> <th>To (Lat, Lon)</th> <th>Distance (m)</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Google Maps</td> <td>38.9072¬∞ N, 77.0369¬∞ W</td> <td>36.7783¬∞ N, 119.4179¬∞ W</td> <td>4,494,898</td> </tr> <tr> <td>2</td> <td>Germany OSM</td> <td>38.9072¬∞ N, 77.0369¬∞ W</td> <td>36.7783¬∞ N, 119.4179¬∞ W</td> <td>InvalidValue</td> </tr> <tr> <td>3</td> <td>Merged OSM</td> <td>38.9072¬∞ N, 77.0369¬∞ W</td> <td>36.7783¬∞ N, 119.4179¬∞ W</td> <td>(Seg Fault)</td> </tr> <tr> <td>4</td> <td>Google Maps</td> <td>38.8945¬∞ N, 77.0704¬∞ W</td> <td>38.8977¬∞ N, 77.0365¬∞ W</td> <td>4,345</td> </tr> <tr> <td>5</td> <td>Germany OSM</td> <td>38.8945¬∞ N, 77.0704¬∞ W</td> <td>38.8977¬∞ N, 77.0365¬∞ W</td> <td>0</td> </tr> <tr> <td>6</td> <td>Google Maps</td> <td>38.8945¬∞ N, 77.0704¬∞ W</td> <td>40.4406¬∞ N, 79.9959¬∞ W</td> <td>392,680</td> </tr> <tr> <td>7</td> <td>Germany OSM</td> <td>38.8945¬∞ N, 77.0704¬∞ W</td> <td>40.4406¬∞ N, 79.9959¬∞ W</td> <td>0</td> </tr> <tr> <td>8</td> <td>Merged OSM</td> <td>38.8945¬∞ N, 77.0704¬∞ W</td> <td>40.4406¬∞ N, 79.9959¬∞ W</td> <td>0</td> </tr> </tbody> </table> </li> </ul> </div> </details> <hr/> <details> <summary><strong>June 13, Monday:</strong> Docker OSRM setup and testing</summary> <div> <ul> <li>Looking for ORSM files to download ‚Üí looking for what OSM and OSRM files are.</li> <li>In order to properly test that the goal is complete, I wanted and worked with the <a href="https://github.com/Project-OSRM/osrm-backend">osrm-backend repository</a>.</li> <li>I downloaded <a href="http://download.geofabrik.de/">North America</a> to start (11 GB, takes about 30 minutes).</li> <li>Also installed <a href="https://docs.docker.com/desktop/mac/install/">Docker</a>.</li> <li><strong>Checked out some logs. Apparently, OSRM can <a href="https://github.com/Project-OSRM/osrm-backend/issues/4489">return 0 if you are running multiple processes</a>. Also, it <a href="https://github.com/Project-OSRM/osrm-backend/issues/5111">returns null if no route between the two places exists</a>.</strong></li> <li> <p>Running <a href="https://github.com/Project-OSRM/osrm-backend">Docker commands</a> from Project-OSRM <code class="language-plaintext highlighter-rouge">osrm-backend</code>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  curl <span class="s2">"http://127.0.0.1:5000/route/v1/driving/13.388860,52.517037;13.385983,52.496891?steps=true"</span>
</code></pre></div> </div> <ul> <li>Looked into port not available error ‚Üí ran the command with port 5001.</li> <li>Got the following error: <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  curl: <span class="o">(</span>52<span class="o">)</span> Empty reply from server
</code></pre></div> </div> <p>Probably means it is not listening. Investigating different ways to start the Docker instance so that it can listen to curls.</p> </li> <li>Went inside the Docker instance, installed curl: <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  apt-get update<span class="p">;</span> apt-get <span class="nb">install </span>curl
</code></pre></div> </div> <p>Then ran the command and it returned a response (<code class="language-plaintext highlighter-rouge">logs/osrm-response-1</code>).</p> </li> <li> <p>Looked up the <code class="language-plaintext highlighter-rouge">-p</code> flag:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  -p=[]      : Publish a container's port or a range of ports to the host
               format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort
               ...
               (use 'docker port' to see the actual mapping)
</code></pre></div> </div> <p>Since it seems like the port can be flexible, the Docker runs the listener on port 5000:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  curl <span class="s2">"http://127.0.0.1:5000/route/v1/driving/13.388860,52.517037;13.385983,52.496891?steps=true"</span>
</code></pre></div> </div> </li> </ul> </li> <li>Constructed a ground truth test for seeing if a route from <code class="language-plaintext highlighter-rouge">77.05472,38.90859</code> to <code class="language-plaintext highlighter-rouge">-75.37836,40.0806</code> would make sense. What happens when you query the server with two points that do not exist? Ran this on the Germany-based Docker: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  curl <span class="s2">"http://127.0.0.1:5000/route/v1/driving/77.05472,38.90859;-77.069351,38.90346?steps=true"</span>
</code></pre></div> </div> </li> <li>Unsure what the response means. Planning to run the frontend and test routing between places with no data. <ul> <li>Access the <strong>Docker IP address</strong>, not the shown one inside (i.e., use <code class="language-plaintext highlighter-rouge">0.0.0.0:9966</code>, not <code class="language-plaintext highlighter-rouge">http://172.17.0.3:9966/</code>).</li> <li>Running the frontend takes a long time and does not load‚Ä¶</li> </ul> </li> <li> <p>Trying to ping a local URL to get the response data. You can get a response from Docker using:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker <span class="nb">exec</span> &lt;docker-id&gt; curl <span class="s2">"http://127.0.0.1:5000/route/v1/driving/77.05472,38.90859;-77.069351,38.90346?steps=true"</span>
</code></pre></div> </div> </li> <li>Coworker gave me a <a href="http://download.geofabrik.de/north-america/us.html">website</a> to download individual pieces for testing merge versions.</li> </ul> </div> </details> <hr/> <details> <summary><strong>June 10th, Friday:</strong> OSM merge, routing issue investigation</summary> <div> <p>Explored merging <a href="https://www.openstreetmap.org/">OpenStreetMap (OSM)</a> files using Osmium to generate tri-state area maps and investigated routing anomalies caused by incorrect location snapping in OSRM.</p> <p><strong>Problem Statement</strong>: It looks like the routing machine is maybe snapping or something. For example, in one case, both locations resolve to a bridge at -77.069351, 38.903462, so the travel time is 0 minutes, which doesn‚Äôt happen on the <a href="https://router.project-osrm.org/table/v1/car/-77.05472,38.90859;-75.37836,40.08063">public router</a>. That‚Äôs happening for 19 other locations around that centroid (block group 110010001011 with a centroid of -77.05472, 38.90859).</p> <ul> <li>I found a tool online called <a href="https://github.com/osmcode/pyosmium/blob/master/README.md">Osmium</a>.</li> <li>PyOsmium was giving me some problems on install, so I used the <a href="https://formulae.brew.sh/formula/osmium-tool">Homebrew version</a> instead.</li> <li>I ran the following command:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>osmium-tool
</code></pre></div> </div> </div> </details> <hr/> <script>
  document.addEventListener("DOMContentLoaded", function () {
    const expandBtn = document.getElementById("expand-all");
    const collapseBtn = document.getElementById("collapse-all");
    const allDetails = document.querySelectorAll("details");

    if (expandBtn) {
      expandBtn.addEventListener("click", () => {
        allDetails.forEach(d => d.setAttribute("open", "true"));
      });
    }

    if (collapseBtn) {
      collapseBtn.addEventListener("click", () => {
        allDetails.forEach(d => d.removeAttribute("open"));
      });
    }
  });
</script>]]></content><author><name></name></author><category term="research-log"/><category term="code"/><category term="data"/><category term="geo"/><category term="mac"/><category term="docker"/><summary type="html"><![CDATA[Merging states for more accurate routing calculations]]></summary></entry></feed>